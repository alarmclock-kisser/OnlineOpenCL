@page "/audio"

@using OnlineOpenCL.Client
@using OnlineOpenCL.Shared
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor
@using System.Diagnostics
@using System.Collections.Concurrent

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ApiClient ApiClient
@inject ApiUrlConfig ApiConfig

<!-- Title -->
<h1 style="font-family: 'Arial Black'">OnlineOpenCL WebApp -- Audio<br></h1>

<!-- Initialized status -->
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.1rem" class="rz-p-sm-12" Reverse="false">
    <RadzenText Text="OpenCL Status:" TextStyle="TextStyle.Subtitle1" />
    <RadzenText Text="@openClServiceInfo.Status" Style="@(openClServiceInfo.Initialized ? "color: green" : "color: red")" />
</RadzenStack>

<!-- Waveform visualizer section: Narrow image with current info -->
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.1rem" class="rz-p-sm-12" Reverse="false">
    <RadzenImage Name="ImageWaveform" Style="width: 100%; height: 200px; object-fit: contain;" Src="@waveformBase64" Placeholder="Loading waveform..." />
    <RadzenText Text="@selectedInfoString" TextStyle="TextStyle.Body1" Style="width: 100%; overflow-wrap: break-word; white-space: pre-wrap; font-family: Arial;" />
</RadzenStack>

<!-- Last error messages -->
<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.1rem" class="rz-p-sm-12" Reverse="false">
    <RadzenText Text="@selectedAudioInfo.ErrorMessage" TextStyle="TextStyle.Body1" Style="max-width: 600px; overflow-wrap: break-word; white-space: pre-wrap; font-family: Arial;" />
</RadzenStack>

<!-- Audio selection section: DropDown with audio names + upload button + download button + remove button -->
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.1rem" class="rz-p-sm-12" Reverse="false">
    <RadzenListBox TValue="Guid" Data="@audioInfos" TextProperty="Name" ValueProperty="Id"
                   @bind-Value="@SelectedAudioGuid" Change="@LoadWaveform"
                   Style="width: 100%; height: 200px;" Name="ListBoxAudioObjects" Placeholder="-- Select Audio Object --">
    </RadzenListBox>
    <RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.1rem" class="rz-p-sm-12" Reverse="false">
        <RadzenButton Name="ButtonUploadAudio" Style="width: 100%; font-family: Arial; background-color: #e0e0e0" Text="Upload"
                      ButtonType="Radzen.ButtonType.Button" ButtonStyle="Radzen.ButtonStyle.Light" Size="Radzen.ButtonSize.Medium" Variant="Radzen.Variant.Filled">
            <InputFile id="audioUpload" OnChange="OnAudioUpload" accept="audio/*" class="rz-mb-2" />
        </RadzenButton>
        <RadzenButton Name="ButtonDownloadSelectedAudio" Style="width: 100%; font-family: Arial; background-color: #e0e0e0" Text="Download"
                      ButtonType="Radzen.ButtonType.Button" ButtonStyle="Radzen.ButtonStyle.Light" Size="Radzen.ButtonSize.Medium" Variant="Radzen.Variant.Filled"
                      Click="@OnDownloadSelected" Disabled="@(SelectedAudioGuid == Guid.Empty)" ></RadzenButton>
        <RadzenButton Name="ButtonRemoveAudioObj" Style="width: 100%; font-family: Arial" Text="Remove" ButtonType="Radzen.ButtonType.Button"
                      ButtonStyle="Radzen.ButtonStyle.Danger" Size="Radzen.ButtonSize.Medium" Variant="Radzen.Variant.Filled"
                      Click="@OnRemoveAudioObj" Disabled="@(SelectedAudioGuid == Guid.Empty)"></RadzenButton>
    </RadzenStack>
</RadzenStack>

<!-- Timestretch section: DropDown with kernel names + execute button + input elements for arguments -->
<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.1rem" class="rz-p-sm-12" Reverse="false">
    <RadzenDropDown Data="@kernelInfos" TextProperty="FunctionName" ValueProperty="FunctionName" @bind-Value="@selectedKernelName"
                    Style="width: fit-content" Name="DropDownKernels" Placeholder="-- Select Kernel --" Change="@StateHasChanged"
                    AllowFiltering="true" FilterAsYouType="true"></RadzenDropDown>
    <RadzenButton Name="ButtonTimestretch" Style="width: fit-content; font-family: Arial" Text="Timestretch"
                  ButtonType="Radzen.ButtonType.Submit" ButtonStyle="@(IsProcessing ? ButtonStyle.Dark : ProcessingWasSuccess ? ButtonStyle.Success : Radzen.ButtonStyle.Info)" Size="Radzen.ButtonSize.Medium" Variant="Radzen.Variant.Filled"
                    Disabled="@(SelectedAudioGuid == Guid.Empty || string.IsNullOrEmpty(SelectedKernelName))" Click="@ExecuteTimestretch" ></RadzenButton>
    <RadzenNumeric Name="NumericStretchFactor" TValue="double" Value="@stretchFactor" Style="width: 20%;" Placeholder="Stretch Factor" Step="0.01" Change="@StateHasChanged"></RadzenNumeric>
    <RadzenNumeric Name="NumericInitialBpm" TValue="float" Value="@selectedAudioInfo.Bpm" Style="width: 20%" Disabled="true" Placeholder="Initial BPM" Change="@StateHasChanged"></RadzenNumeric>
    <RadzenNumeric Name="NumericFinalBpm" TValue="float" @bind-Value="@targetBpm" Style="width: 20%" Placeholder="Final BPM" Change="@StateHasChanged"></RadzenNumeric>
    <RadzenNumeric Name="NumericChunkSize" @bind-Value="@chunkSize" Style="width: 15%;" Placeholder="Chunk Size" Min="256" Max="65536" Step="1024"></RadzenNumeric>
    <RadzenNumeric Name="NumericOverlap" TValue="float" @bind-Value="@overlap" Style="width: 15%;" Placeholder="Overlap" Step="0.01"></RadzenNumeric>
</RadzenStack>



@code {
    [CascadingParameter]
    public Func<string, bool, Task> AddLogEntry { get; set; } = null!;
    public string LogPrefix { get; set; } = "[/audio] ";

    private ClStatusInfo openClServiceInfo = new ClStatusInfo();

    private IEnumerable<AudioObjInfo> audioInfos = [];

    private string waveformBase64 = string.Empty;

    private Guid selectedAudioGuid = Guid.Empty;
    public Guid SelectedAudioGuid
    {
        get => selectedAudioGuid;
        set
        {
            selectedAudioGuid = value;
            StateHasChanged();
        }
    }

    private AudioObjInfo selectedAudioInfo => audioInfos.FirstOrDefault(info => info.Id == selectedAudioGuid) ?? new AudioObjInfo(null);

    private string selectedInfoString => selectedAudioInfo?.ToString() ?? "No audio selected.";

    private IEnumerable<ClKernelInfo> kernelInfos = [];
    public string kernelFilter { get; set; } = "stretch";
    private string selectedKernelName = string.Empty;
    public string SelectedKernelName
    {
        get => selectedKernelName;
        set
        {
            selectedKernelName = value;
            StateHasChanged();
        }
    }

    private string selectedKernelVersion => SelectedKernelName.ToCharArray()
        .Where(c => char.IsDigit(c))
        .Aggregate(string.Empty, (current, c) => current + c.ToString());

    private bool isProcessing = false;
    public bool IsProcessing
    {
        get => isProcessing;
        set
        {
            isProcessing = value;
            StateHasChanged();
        }
    }

    private bool processingWasSuccess = false;
    public bool ProcessingWasSuccess
    {
        get => processingWasSuccess;
        set
        {
            processingWasSuccess = value;
            StateHasChanged();
        }
    }

    private float targetBpm = 120.0f;
    private double stretchFactor => selectedAudioInfo.Id != Guid.Empty && selectedAudioInfo.Bpm > 0 ? selectedAudioInfo.Bpm / targetBpm : 1.0;
    private int chunkSize = 16384;
    private float overlap = 0.5f;




    private async Task AddLog(string message)
    {
        try
        {
            await AddLogEntry(LogPrefix + message, false);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logging failed: {ex.Message}");
        }
    }

    private async Task AddLog(string message, bool overwrite)
    {
        try
        {
            await AddLogEntry(LogPrefix + message, overwrite);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logging failed: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await AddLog("Initializing Audio page...").ConfigureAwait(false);
        await RefreshInfos();
        await AddLog("Audio page initialized successfully.", true).ConfigureAwait(false);
    }

    protected async Task RefreshInfos()
    {
        Stopwatch sw = Stopwatch.StartNew();

        try
        {
            await AddLog("Refreshing infos...").ConfigureAwait(false);

            // Get OpenCL service info
            openClServiceInfo = await ApiClient.GetOpenClServiceInfo();

            // Get audio infos
            audioInfos = await ApiClient.GetAudioInfos();

            kernelInfos = await ApiClient.GetOpenClKernelInfos(kernelFilter);

            StateHasChanged();

            await AddLog($"Refreshed infos ({sw.ElapsedMilliseconds} ms elapsed).", true).ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            await AddLog($"Error refreshing infos: {ex.Message}").ConfigureAwait(false);
            return;
        }
        finally
        {
            sw.Stop();
            StateHasChanged();
        }
    }

    private async Task ExecuteTimestretch()
    {
        Guid guid = SelectedAudioGuid;

        if (guid == Guid.Empty)
        {
            await AddLog("No audio selected for timestretch.").ConfigureAwait(false);
            return;
        }

        var result = new AudioObjInfo();

        await AddLog($"Executing timestretch ('{SelectedKernelName}.cl') ...").ConfigureAwait(false);
        IsProcessing = true;

        try
        {
            result = await ApiClient.ExecuteTimestretch(
            guid,
            selectedKernelName.Replace(selectedKernelVersion, string.Empty), selectedKernelVersion,
            stretchFactor, chunkSize, overlap);

            if (result.Id == Guid.Empty)
            {
                await AddLog($"Timestretch execution failed ({SelectedKernelName}.cl) with info: '{result.ErrorMessage}'").ConfigureAwait(false);
                await LoadWaveform();
            }
            else
            {
                await AddLog($"Successfully executed '{SelectedKernelName}.cl' within {result.ElapsedProcessing:F1} ms. Updated audio object with Guid: '{result.Id}'", true).ConfigureAwait(false);
            }
        }
        catch (Exception ex)
        {
            await AddLog($"Error executing timestretch: {ex.Message}").ConfigureAwait(false);
            return;
        }
        finally
        {
            IsProcessing = false;
            ProcessingWasSuccess = result.Id != Guid.Empty;
            //SelectedAudioGuid = result.Id;
            await RefreshInfos();
        }
    }

    private async Task LoadWaveform()
    {
        isProcessing = false;
        processingWasSuccess = false;
        if (SelectedAudioGuid == Guid.Empty)
        {
            waveformBase64 = string.Empty;
            await AddLog("No audio selected or invalid audio object.").ConfigureAwait(false);
            StateHasChanged();
            return;
        }

        try
        {
            var data = await ApiClient.GetBase64Waveform(SelectedAudioGuid);
            waveformBase64 = data.Data64;
            await AddLog($"Retrieved base64 string from '{SelectedAudioGuid}' (length: {data.Length})").ConfigureAwait(false);
        }
        catch (Exception ex)
        {
            waveformBase64 = string.Empty;
            await AddLog($"Error getting base64 string for waveform ''{SelectedAudioGuid}': " + ex).ConfigureAwait(false);
        }
        finally
        {
            StateHasChanged();
        }
    }

    protected async Task OnAudioUpload(InputFileChangeEventArgs e)
    {
        await AddLog("Uploading audio file...").ConfigureAwait(false);
        var info = new AudioObjInfo(null);

        try
        {
            var file = e.File;
            if (file.Size > 0)
            {
                await using var stream = file.OpenReadStream(maxAllowedSize: 512 * 1024 * 1024);
                FileParameter fp = new FileParameter(stream, file.Name, file.ContentType);
                info = await ApiClient.UploadAudio(fp);
                await AddLog($"Uploaded '{info.Name}' successfully! {info.ElapsedLoading:F1} ms elapsed").ConfigureAwait(false);
            }
        }
        catch (Exception ex)
        {
            await AddLog($"Error uploading audio: {ex.Message}", true).ConfigureAwait(false);
        }
        finally
        {
            SelectedAudioGuid = info.Id;
            await LoadWaveform();
            await RefreshInfos();
        }
    }

    protected async Task OnDownloadSelected()
    {
        string fileName = string.Empty;

        if (SelectedAudioGuid != Guid.Empty)
        {
            await AddLog($"Downloading audio with Guid: {SelectedAudioGuid}...").ConfigureAwait(false);
            try
            {
                // Direkt die URL zum API-Endpunkt aufrufen
                string downloadUrl = $"{ApiConfig.Url}/api/audio/download/{SelectedAudioGuid}";

                // Rufe die JavaScript-Funktion auf, um den Download zu starten
                await JSRuntime.InvokeVoidAsync("downloadFileFromUrl", downloadUrl, $"{fileName}.wav");

                // Füge diese Zeile hinzu:
                await AddLog($"Got Download-URL: {downloadUrl}").ConfigureAwait(false);

                await AddLog($"Downloading '{fileName}' started.").ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                await AddLog($"Error downloading '{fileName}': {ex.Message}").ConfigureAwait(false);
            }
            finally
            {
                await RefreshInfos().ConfigureAwait(false);
            }
        }
        else
        {
            await AddLog("No audio selected to download.").ConfigureAwait(false);
        }
    }

    private async Task OnRemoveAudioObj()
    {
        if (SelectedAudioGuid == Guid.Empty)
        {
            await AddLog("No audio selected to remove.").ConfigureAwait(false);
            return;
        }

        var result = false;

        try
        {
            result = await ApiClient.RemoveAudio(SelectedAudioGuid);
        }
        catch (Exception ex)
        {
            await AddLog($"Error removing audio object '{SelectedAudioGuid}': {ex.Message}").ConfigureAwait(false);
            return;
        }
        finally
        {
            if (result)
            {
                await AddLog($"Audio object '{SelectedAudioGuid}' removed successfully.").ConfigureAwait(false);
            }
            else
            {
                await AddLog($"Failed to remove audio object '{selectedAudioInfo.Id}'.").ConfigureAwait(false);
            }

            SelectedAudioGuid = Guid.Empty;
            await RefreshInfos();
            await LoadWaveform().ConfigureAwait(false);
        }
    }

}
